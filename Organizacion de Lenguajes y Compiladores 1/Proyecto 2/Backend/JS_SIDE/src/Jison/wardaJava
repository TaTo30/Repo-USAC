/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
let saveData = "";
var nodos = []
var nodo = 0
function Save(value) {
    saveData = value;
}


function ReturnSave() {
    return saveData;
}

var traduccion = ""; 
var java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,20],$V2=[1,19],$V3=[1,37],$V4=[1,18],$V5=[1,21],$V6=[1,25],$V7=[1,22],$V8=[1,43],$V9=[1,39],$Va=[1,24],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,38],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,29],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[1,34],$Vo=[1,35],$Vp=[1,36],$Vq=[2,5,23,24,25,26,28,29,31,33,36,38,44,51,52,53,55,56,57,58,60,63,64,65,66,67,68,78],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[1,64],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[1,70],$VG=[1,74],$VH=[2,63],$VI=[1,86],$VJ=[7,27,49,59,60,61,62,69,70,71,72,73,74,75,76,77,79,80],$VK=[27,49],$VL=[7,49],$VM=[7,27,49,59,60,61,62,69,70,71,72,73,74,75,76,77],$VN=[7,27,49,59,60,69,70,71,72,73,74,75,76,77],$VO=[7,27,49,69,70,71,72,73,74,75,76,77],$VP=[7,27,49,73,74,75,76,77],$VQ=[2,5,23,24,25,26,28,29,30,31,33,36,38,44,51,52,53,55,56,57,58,60,63,64,65,66,67,68,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"PUNTOCOMA":7,"LLAVEABRIR":8,"SENTENCIAFOR":9,"SENTENCIAWHILE":10,"SENTENCIADOWHILE":11,"SENTENCIAIF":12,"ASIGNACION":13,"DECLARACION":14,"PRINT":15,"CALL":16,"FUNCIONES":17,"CLASES":18,"INTERFACES":19,"SENTENCIAS":20,"EXP":21,"BLOQUESENTENCIAS":22,"LLAVECERRAR":23,"RDO":24,"RWHILE":25,"PARABRIR":26,"PARCERRAR":27,"RFOR":28,"RIF":29,"RELSE":30,"RPUBLIC":31,"RINTERFACE":32,"IDENTIFICADOR":33,"RCLASS":34,"RSTATIC":35,"RVOID":36,"RMAIN":37,"RSTRING":38,"CORABRIR":39,"CORCERRAR":40,"TIPO":41,"LISTAPARAMETROSDECLARADOS":42,"LISTAPARAMETROSENVIADOS":43,"RSYSTEM":44,"PUNTO":45,"ROUT":46,"RPRINT":47,"RPRINTLN":48,"COMA":49,"IGUAL":50,"RBREAK":51,"RCONTINUE":52,"RRETURN":53,"LISTADECLARACION":54,"RINT":55,"RBOOLEAN":56,"RDOUBLE":57,"RCHAR":58,"MAS":59,"MENOS":60,"MULTIPLICACION":61,"DIVISION":62,"CADENA":63,"CARACTER":64,"RTRUE":65,"RFALSE":66,"ENTERO":67,"DECIMAL":68,"MAYORQUE":69,"MENORQUE":70,"MAYORIGUALQUE":71,"MENORIGUALQUE":72,"IGUALIGUAL":73,"DIFERENTE":74,"AND":75,"OR":76,"XOR":77,"NOT":78,"ADICION":79,"SUBSTRACCION":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PUNTOCOMA",8:"LLAVEABRIR",23:"LLAVECERRAR",24:"RDO",25:"RWHILE",26:"PARABRIR",27:"PARCERRAR",28:"RFOR",29:"RIF",30:"RELSE",31:"RPUBLIC",32:"RINTERFACE",33:"IDENTIFICADOR",34:"RCLASS",35:"RSTATIC",36:"RVOID",37:"RMAIN",38:"RSTRING",39:"CORABRIR",40:"CORCERRAR",44:"RSYSTEM",45:"PUNTO",46:"ROUT",47:"RPRINT",48:"RPRINTLN",49:"COMA",50:"IGUAL",51:"RBREAK",52:"RCONTINUE",53:"RRETURN",55:"RINT",56:"RBOOLEAN",57:"RDOUBLE",58:"RCHAR",59:"MAS",60:"MENOS",61:"MULTIPLICACION",62:"DIVISION",63:"CADENA",64:"CARACTER",65:"RTRUE",66:"RFALSE",67:"ENTERO",68:"DECIMAL",69:"MAYORQUE",70:"MENORQUE",71:"MAYORIGUALQUE",72:"MENORIGUALQUE",73:"IGUALIGUAL",74:"DIFERENTE",75:"AND",76:"OR",77:"XOR",78:"NOT",79:"ADICION",80:"SUBSTRACCION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[22,3],[22,2],[11,6],[10,5],[9,9],[12,5],[12,7],[12,7],[19,4],[18,4],[18,11],[17,6],[17,7],[16,4],[15,8],[15,8],[43,3],[43,1],[43,0],[42,4],[42,2],[42,0],[13,3],[20,1],[20,1],[20,1],[20,2],[14,2],[54,5],[54,3],[54,3],[54,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,2],[21,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        return $$[$0-1];
    
break;
case 2: //INSTRUCCIONES INSTRUCCION
 traduccion = this.$ = `${$$[$0-1]}${$$[$0]}`
 AST.DOT.INSTRUCCIONES(0)
 /*var padre = nodo;
 nodo++
 console.log(`node${padre}[label = "INSTRUCCIONES"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)*/
break;
case 3: 
 traduccion = this.$ = `${$$[$0]}`
 AST.DOT.INSTRUCCIONES(1)
 /*var padre = nodo;
 nodo++
 console.log(`node${padre}[label = "INSTRUCCIONES"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodos.push(padre)*/
break;
case 7: case 8: case 10: case 15: case 16: case 17: //ALGO
 traduccion = this.$ = `${$$[$0]}`
 AST.DOT.INSTRUCCION(1)
 /*var padre = nodo;
 nodo++
 console.log(`node${padre}[label = "INSTRUCCION"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodos.push(padre)*/
break;
case 4: case 5: case 6:
            //console.log(traduccion);
            Save(traduccion)
            /*console.log('Error sintÃ¡ctico:'+ $$[$0-1] + 'en la linea: ' +this._$.first_line + ', en la columna: ' + this._$.first_column+ 'Se esperaba: '+ yy.parser.hash.expected.join(",")); 
            var agregarError = ErroresINT.AgregarError;
            agregarError(yy.parser.hash.expected.join(","), this._$.first_line, this._$.first_column, 2);
      */  
break;
case 9: case 11: case 12: case 13: case 14: case 18: case 19: //ALGO ;
 traduccion = this.$ = `${$$[$0-1]};\n`
 AST.DOT.INSTRUCCION(0)
 /*var padre = nodo;
 nodo++
 console.log(`node${padre}[label = "INSTRUCCION"];`);
 console.log(`node${nodo}[label = ";"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${nodo};`);
 nodo++
 nodos.push(padre)*/
break;
case 20: //LLAVEABRIR INSTRUCCIONES LLAVECERRAR
 traduccion = this.$ = `{\n${$$[$0-1]}}\n`
 AST.DOT.BLOQUE(0)
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 console.log(`node${padre}[label = "BLOQUESENTENCIAS"];`);
 console.log(`node${hijo0}[label = "{"];`);
 console.log(`node${hijo1}[label = "}"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${hijo1};`);
 nodos.push(padre)*/
break;
case 21: //LLAVEABRIR LLAVECERRAR
 traduccion = this.$ = '{\n}\n'
 AST.DOT.BLOQUE(1)
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 console.log(`node${padre}[label = "BLOQUESENTENCIAS"];`);
 console.log(`node${hijo0}[label = "{"];`);
 console.log(`node${hijo1}[label = "}"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 nodos.push(padre)*/

break;
case 22: //RDO BLOQUESENTENCIAS RWHILE PARABRIR EXP PARCERRAR 
 traduccion = this.$ = `do ${$$[$0-4]} while (${$$[$0-1]})`;
 AST.DOT.DO();
/* var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;
 var hijo3 = nodo;
 nodo++;

 console.log(`node${padre}[label = "DOWHILE"];`);
 console.log(`node${hijo0}[label = "do"];`);
 console.log(`node${hijo1}[label = "("];`);
 console.log(`node${hijo2}[label = ")"];`);
 console.log(`node${hijo3}[label = "while"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo3};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 console.log(`node${padre} -> node${hijo2};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre);*/
break;
case 23: //RWHILE PARABRIR EXP PARCERRAR BLOQUESENTENCIAS
 traduccion = this.$ = `while (${$$[$0-2]}) ${$$[$0]}`;
 AST.DOT.WHILE();
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;

 console.log(`node${padre}[label = "WHILE"];`);
 console.log(`node${hijo0}[label = "while"];`);
 console.log(`node${hijo1}[label = "("];`);
 console.log(`node${hijo2}[label = ")"];`);

 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre);*/
break;
case 24: //RFOR PARABRIR DECLARACION PUNTOCOMA EXP PUNTOCOMA EXP PARCERRAR BLOQUESENTENCIAS
 traduccion = this.$ = `for (${$$[$0-6]}; ${$$[$0-4]}; ${$$[$0-2]}) ${$$[$0]}`;
 AST.DOT.FOR();
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;
 var hijo3 = nodo;
 nodo++;
 var hijo4 = nodo;
 nodo++;
 console.log(`node${padre}[label = "FOR"];`);
 console.log(`node${hijo0}[label = "for"];`);
 console.log(`node${hijo1}[label = "("];`);
 console.log(`node${hijo2}[label = ";"];`);
 console.log(`node${hijo3}[label = ";"];`);
 console.log(`node${hijo4}[label = ")"];`);

 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 4]};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 3]};`);
 console.log(`node${padre} -> node${hijo3};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo4};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.pop()
 nodos.pop()
 nodos.push(padre);*/
break;
case 25:
 traduccion = this.$ = `if(${$$[$0-2]}) ${$$[$0]}`;
 AST.DOT.IF(0)
 /*var padre = nodo;
 nodo++
 var hijo0 = nodo;
 nodo++
 var hijo1 = nodo;
 nodo++
 var hijo2 = nodo;
 nodo++
 console.log(`node${padre}[label = "IF"];`);
 console.log(`node${hijo0}[label = "if"];`);
 console.log(`node${hijo1}[label = "("];`);
 console.log(`node${hijo2}[label = ")"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre);*/
break;
case 26: case 27: //RIF PARABRIR EXP PARCERRAR BLOQUESENTENCIAS RELSE BLOQUESENTENCIAS
 traduccion = this.$ = `if(${$$[$0-4]}) ${$$[$0-2]} else ${$$[$0]}`;
 AST.DOT.IF(1)
 /*var padre = nodo;
 nodo++
 var hijo0 = nodo;
 nodo++
 var hijo1 = nodo;
 nodo++
 var hijo2 = nodo;
 nodo++
 var hijo3 = nodo;
 nodo++
 console.log(`node${padre}[label = "IF"];`);
 console.log(`node${hijo0}[label = "if"];`);
 console.log(`node${hijo1}[label = "("];`);
 console.log(`node${hijo2}[label = ")"];`);
 console.log(`node${hijo3}[label = "else"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 3]};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo3};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.pop()
 nodos.push(padre);*/
break;
case 28: //RPUBLIC RINTERFACE IDENTIFICADOR BLOQUESENTENCIAS
 traduccion = this.$ = '';
 AST.DOT.INTERFAZ($$[$0-1])
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;

 console.log(`node${padre}[label = "INTERFACE"];`);
 console.log(`node${hijo0}[label = "public"];`);
 console.log(`node${hijo1}[label = "interface"];`);
 console.log(`node${hijo2}[label = "${$$[$0-1]}"];`);

 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${nodos.pop()};`);

 nodos.push(padre);*/
break;
case 38: case 41:
 traduccion = this.$ = '';
break;
case 29: //RPUBLIC RCLASS IDENTIFICADOR BLOQUESENTENCIAS    
 traduccion = this.$ = `class ${$$[$0-1]} ${$$[$0]}`;
 AST.DOT.CLASS(0, $$[$0-1])
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo7 = nodo;
 nodo++;
 console.log(`node${padre}[label = "MAIN"];`);
 console.log(`node${hijo0}[label = "public"];`);
 console.log(`node${hijo1}[label = "class"];`);
 console.log(`node${hijo7}[label = "${$$[$0-1]}"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${hijo7};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodos.push(padre);*/
break;
case 30: //RPUBLIC RSTATIC RVOID RMAIN PARABRIR RSTRING CORABRIR CORCERRAR IDENTIFICADOR PARCERRAR BLOQUESENTENCIAS
 traduccion = this.$ = `class main ${$$[$0]}`;
 AST.DOT.CLASS(1, null)
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;
 var hijo3 = nodo;
 nodo++;
 var hijo4 = nodo;
 nodo++;
 var hijo5 = nodo;
 nodo++;
 var hijo6 = nodo;
 nodo++;
 var hijo7 = nodo;
 nodo++;
 var hijo8 = nodo;
 nodo++;
 console.log(`node${padre}[label = "MAIN"];`);
 console.log(`node${hijo0}[label = "public"];`);
 console.log(`node${hijo1}[label = "static"];`);
 console.log(`node${hijo2}[label = "void"];`);
 console.log(`node${hijo3}[label = "main"];`);
 console.log(`node${hijo4}[label = "("];`);
 console.log(`node${hijo5}[label = "String"];`);
 console.log(`node${hijo6}[label = "["];`);
 console.log(`node${hijo7}[label = "]"];`);
 console.log(`node${hijo8}[label = ")"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${hijo3};`);
 console.log(`node${padre} -> node${hijo4};`);
 console.log(`node${padre} -> node${hijo5};`);
 console.log(`node${padre} -> node${hijo6};`);
 console.log(`node${padre} -> node${hijo7};`);
 console.log(`node${padre} -> node${hijo8};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodos.push(padre);*/
break;
case 31: //RPUBLIC TIPO IDENTIFICADOR PARABRIR LISTAPARAMETROSDECLARADOS PARCERRAR
 traduccion = this.$ = `function ${$$[$0-3]}(${$$[$0-1]})`;
 AST.DOT.FUNCION(1)
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;
 var hijo3 = nodo;
 nodo++;
 console.log(`node${padre}[label = "FUNCION"];`);
 console.log(`node${hijo0}[label = "public"];`);
 console.log(`node${hijo1}[label = "${$$[$0-4]}"];`);
 console.log(`node${hijo2}[label = "("];`);
 console.log(`node${hijo3}[label = ")"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 console.log(`node${padre} -> node${hijo3};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)*/
break;
case 32: //RPUBLIC TIPO IDENTIFICADOR PARABRIR LISTAPARAMETROSDECLARADOS PARCERRAR BLOQUESENTENCIAS
 traduccion = this.$ = `function ${$$[$0-4]}(${$$[$0-2]}) ${$$[$0]}`;
 AST.DOT.FUNCION(0)
/*
 var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;
 var hijo3 = nodo;
 nodo++;
 console.log(`node${padre}[label = "FUNCION"];`);
 console.log(`node${hijo0}[label = "public"];`);
 console.log(`node${hijo1}[label = "${$$[$0-4]}"];`);
 console.log(`node${hijo2}[label = "("];`);
 console.log(`node${hijo3}[label = ")"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 3]};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo3};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.pop()
 nodos.push(padre)*/
break;
case 33: //IDENTIFICADOR PARABRIR LISTAPARAMETROSENVIADOS PARCERRAR
 traduccion = this.$ = `${$$[$0-3]}(${$$[$0-1]})`; 
 AST.DOT.CALL($$[$0-3])
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;
 console.log(`node${padre}[label = "CALL"];`);
 console.log(`node${hijo0}[label = "("];`);
 console.log(`node${hijo1}[label = ")"];`);
 console.log(`node${hijo2}[label = "${$$[$0-3]}"];`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${hijo1};`);
 nodos.push(padre);*/

break;
case 34: case 35:
 traduccion = this.$ = `Console.log(${$$[$0-1]})`;
 AST.DOT.PRINT()
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 var hijo2 = nodo;
 nodo++;
 var hijo3 = nodo;
 nodo++;
 var hijo4 = nodo;
 nodo++;
 var hijo5 = nodo;
 nodo++;
 var hijo6 = nodo;
 nodo++;
 console.log(`node${padre}[label = "PRINT"];`);
 console.log(`node${hijo0}[label = "system"];`);
 console.log(`node${hijo1}[label = "."];`);
 console.log(`node${hijo2}[label = "out"];`);
 console.log(`node${hijo3}[label = "."];`);
 console.log(`node${hijo4}[label = "println"];`);
 console.log(`node${hijo5}[label = "("];`);
 console.log(`node${hijo6}[label = ")"];`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${hijo2};`);
 console.log(`node${padre} -> node${hijo3};`);
 console.log(`node${padre} -> node${hijo4};`);
 console.log(`node${padre} -> node${hijo5};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${hijo6};`);
 nodos.push(padre)*/
break;
case 36: 
traduccion = this.$ = `${$$[$0-2]}, ${$$[$0]}`;
AST.DOT.LISTA(0, null)
/*var padre = nodo;
nodo++;
var hijo0 = nodo;
nodo++;
var hijo1 = nodo;
nodo++
console.log(`node${padre}[label = "LISTA"];`);
console.log(`node${hijo0}[label = ","];`);
console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
console.log(`node${padre} -> node${hijo0};`);
console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
nodos.pop()
nodos.pop()
nodos.push(padre)*/
break;
case 49:
 traduccion = this.$ = `${$$[$0-2]}, ${$$[$0]}`;
 AST.DOT.LISTA(1,$$[$0]);
/* var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++
 console.log(`node${padre}[label = "LISTA"];`);
 console.log(`node${hijo0}[label = ","];`);
 console.log(`node${hijo1}[label = "${$$[$0]}"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${hijo1};`);
 nodos.push(padre)*/
break;
case 37: //EXP
 traduccion = this.$ = `${$$[$0]}`;
 AST.DOT.LISTA(2, null)
 /*var padre = nodo;
 nodo++;

 console.log(`node${padre}[label = "LISTA"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodos.push(padre);*/
break;
case 40: //TIPO IDENTIFICADOR
 traduccion = this.$ = `${$$[$0]}`;
 AST.DOT.LISTA(3, null)
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 console.log(`node${padre}[label = "LISTA"];`);
 console.log(`node${hijo0}[label = "${$$[$0]}"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${hijo0};`);
 nodos.push(padre);*/
break;
case 51: case 64: case 65: case 68: case 69:
 traduccion = this.$ = `${$$[$0]}`;
 AST.DOT.DATO($$[$0])
 /*nodos.push(nodo)
 console.log(`node${nodo}[label = "${$$[$0].replace(/\"/gi,"\\\"")}"]`);
 nodo++*/
 //console.log('VALUE: '+$$[$0]);
break;
case 39:
 traduccion = this.$ = `${$$[$0-3]}, ${$$[$0]}`;
 AST.DOT.LISTA(4, $$[$0])
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++
 console.log(`node${padre}[label = "LISTA"];`);
 console.log(`node${hijo0}[label = ","];`);
 console.log(`node${hijo1}[label = "${$$[$0]}"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 console.log(`node${padre} -> node${hijo1};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre);*/

break;
case 42: 
traduccion = this.$ = `${$$[$0-2]} = ${$$[$0]}`; //IDENTIFICADOR
AST.DOT.ASIGNACION($$[$0-2])
/*var padre = nodo;
nodo++
var hijo0 = nodo;
nodo++;
console.log(`node${padre}[label = "ASIGNACION"];`);
console.log(`node${hijo0}[label = "="];`);
console.log(`node${nodo}[label = "${$$[$0-2]}"];`);
console.log(`node${padre} -> node${nodo};`);
console.log(`node${padre} -> node${hijo0};`);
console.log(`node${padre} -> node${nodos.pop()};`);
nodo++
nodos.push(padre)*/
break;
case 50:
 traduccion = this.$ = `${$$[$0-2]} = ${$$[$0]}`; //IDENTIFICADOR
 AST.DOT.LISTA(5, $$[$0-2])
 /*var padre = nodo;
 nodo++
 var hijo0 = nodo;
 nodo++;
 console.log(`node${padre}[label = "LISTA"];`);
 console.log(`node${hijo0}[label = "="];`);
 console.log(`node${nodo}[label = "${$$[$0-2]}"];`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodo++
 nodos.push(padre)*/
break;
case 43:
 traduccion = this.$ = 'break';
 AST.DOT.SENTENCIA(0, 'break')
 /*var padre = nodo;
 nodo++
 console.log(`node${padre}[label = "Sentencia"];`);
 console.log(`node${nodo}[label = "break"];`);
 console.log(`node${padre} -> node${nodo};`);
 nodo++
 nodos.push(padre);*/

break; 
case 44:
 traduccion = this.$ = 'continue';
 AST.DOT.SENTENCIA(0, 'continue')
 /*
 var padre = nodo;
 nodo++
 console.log(`node${padre}[label = "Sentencia"];`);
 console.log(`node${nodo}[label = "continue"];`);
 console.log(`node${padre} -> node${nodo};`);
 nodo++
 nodos.push(padre);*/
break;
case 45:
 traduccion = this.$ = 'return';
 AST.DOT.SENTENCIA(0, 'return')
 /*
 var padre = nodo;
 nodo++
 console.log(`node${padre}[label = "Sentencia"];`);
 console.log(`node${nodo}[label = "return"];`);
 console.log(`node${padre} -> node${nodo};`);
 nodo++
 nodos.push(padre);*/
break;
case 46:
 traduccion = this.$ = `return ${$$[$0]}`;
 AST.DOT.SENTENCIA(1, $$[$0])
 /*var padre = nodo;
 nodo++
 var hijo0 = nodo;
 nodo++
 console.log(`node${padre}[label = "Sentencia"];`);
 console.log(`node${nodo}[label = "return"];`);
 console.log(`node${hijo0}[label = "${$$[$0]}"]`);
 console.log(`node${padre} -> node${nodo};`);
 nodo++
 nodos.push(padre);*/
break;
case 47:
 traduccion = this.$ = `${$$[$0-1]}${$$[$0]}`;
 AST.DOT.DECLARACION()
 /*var padre = nodo;
 nodo++;
 console.log(`node${padre}[label = "DECLARACION"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)*/
break;
case 48:
 traduccion = this.$ = `${$$[$0-4]}, ${$$[$0-2]} = ${$$[$0]}`;
 AST.DOT.LISTA(6, null);
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo;
 nodo++;
 console.log(`node${padre}[label = "LISTA"];`);
 console.log(`node${hijo0}[label = ","];`);
 console.log(`node${hijo1}[label = "="];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 3]};`);
 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${hijo1};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.pop()
 nodos.push(padre);*/

break;
case 52: case 53: case 54: case 55: case 56: case 57:
 traduccion = this.$ = 'var ';
 AST.DOT.DATO($$[$0])
 /*nodos.push(nodo)
 console.log(`node${nodo}[label = "${$$[$0]}"]`);
 nodo++*/
break;
case 58:
 traduccion = this.$ = `${$$[$0-2]} + ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '+')
/* var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "+"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre);
 nodo++*/

break;
case 59:
 traduccion = this.$ = `${$$[$0-2]} - ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '-')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "-"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 60:
 traduccion = this.$ = `${$$[$0-2]} * ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '*')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "*"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 61:
 traduccion = this.$ = `${$$[$0-2]} / ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '/')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "/"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 62:
 traduccion = this.$ = `-${$$[$0]}`;
 AST.DOT.EXPRESION(2, '-')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "-"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodos.push(padre)
 nodo++*/
break;
case 63:
 traduccion = this.$ = $$[$0];
 AST.DOT.DATO($$[$0])
 /*nodos.push(nodo)
 console.log(`node${nodo}[label = "${$$[$0]}"]`);
 nodo++*/
 //console.log("VALUE: "+$$[$0])
break;
case 66:
 traduccion = this.$ = `true`;
 AST.DOT.DATO('true')
 /*nodos.push(nodo)
 console.log(`node${nodo}[label = "true"]`);
 nodo++*/
break;
case 67:
 traduccion = this.$ = `false`;
 AST.DOT.DATO('false')
 /*nodos.push(nodo)
 console.log(`node${nodo}[label = "false"]`);
 nodo++*/
break;
case 70:
 traduccion = this.$ = `${$$[$0-2]} > ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '>')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = ">"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/

break;
case 71:
 traduccion = this.$ = `${$$[$0-2]} < ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '<')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = ">"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 72:
 traduccion = this.$ = `${$$[$0-2]} >= ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '>=')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = ">="];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 73:
 traduccion = this.$ = `${$$[$0-2]} <= ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '<=')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "<="];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 74:
 traduccion = this.$ = `${$$[$0-2]} == ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '==')
/* var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "=="];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 75:
 traduccion = this.$ = `${$$[$0-2]} != ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '!=')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "!="];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 76:
 traduccion = this.$ = `${$$[$0-2]} && ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '&&')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "&&"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 77:
 traduccion = this.$ = `${$$[$0-2]} || ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '||')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "||"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 78:
 traduccion = this.$ = `${$$[$0-2]} ^ ${$$[$0]}`;
 AST.DOT.EXPRESION(0, '^')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "^"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos[nodos.length - 2]};`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos[nodos.length - 1]};`);
 nodos.pop()
 nodos.pop()
 nodos.push(padre)
 nodo++*/
break;
case 79:
 traduccion = this.$ = `!${$$[$0]}`;
 AST.DOT.EXPRESION(2, '!')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "!="];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodo};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 nodos.push(padre)
 nodo++*/

break;
case 80:
 traduccion = this.$ = `(${$$[$0-1]})`;
 AST.DOT.EXPRESION(3, null)
 /*var padre = nodo;
 nodo++;
 var hijo0 = nodo;
 nodo++;
 var hijo1 = nodo; 
 nodo++;

 console.log(`node${hijo0}[label = "("];`);
 console.log(`node${hijo1}[label = ")"];`);
 console.log(`node${padre}[label = "EXP"];`);

 console.log(`node${padre} -> node${hijo0};`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${hijo1};`);
 nodos.push(padre)*/
break;
case 81:
 traduccion = this.$ = `${$$[$0-1]}++`;
 AST.DOT.EXPRESION(1, '++')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "++"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${nodo};`);
 nodos.push(padre)
 nodo++*/
break;
case 82:
 traduccion = this.$ = `${$$[$0-1]}--`;
 AST.DOT.EXPRESION(1, '--')
 /*var padre = nodo;
 nodo++;
 console.log(`node${nodo}[label = "++"];`);
 console.log(`node${padre}[label = "EXP"];`);
 console.log(`node${padre} -> node${nodos.pop()};`);
 console.log(`node${padre} -> node${nodo};`);
 nodos.push(padre)
 nodo++*/
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,25:$V2,26:$V3,28:$V4,29:$V5,31:$V6,33:$V7,36:$V8,38:$V9,41:23,44:$Va,51:$Vb,52:$Vc,53:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{1:[3]},{2:$V0,5:[1,44],6:45,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,25:$V2,26:$V3,28:$V4,29:$V5,31:$V6,33:$V7,36:$V8,38:$V9,41:23,44:$Va,51:$Vb,52:$Vc,53:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($Vq,[2,3]),{5:[1,48],7:[1,46],8:[1,47]},o($Vq,[2,7]),o($Vq,[2,8]),{7:[1,49]},o($Vq,[2,10]),{7:[1,50]},{7:[1,51]},{7:[1,52]},{7:[1,53]},o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),{7:[1,54]},{7:[1,55],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},{26:[1,71]},{26:[1,72]},{8:$VG,22:73},{26:[1,75]},o([7,59,60,61,62,69,70,71,72,73,74,75,76,77,79,80],$VH,{26:[1,77],50:[1,76]}),{33:[1,79],54:78},{45:[1,80]},{32:[1,84],34:[1,82],35:[1,83],36:$V8,38:$V9,41:81,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{7:[2,43]},{7:[2,44]},{7:[2,45],21:85,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:87,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($VJ,[2,64]),o($VJ,[2,65]),o($VJ,[2,66]),o($VJ,[2,67]),o($VJ,[2,68]),o($VJ,[2,69]),{21:88,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:89,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{33:[2,52]},{33:[2,53]},{33:[2,54]},{33:[2,55]},{33:[2,56]},{33:[2,57]},{1:[2,1]},o($Vq,[2,2]),o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,9]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,18]),o($Vq,[2,19]),{21:90,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:91,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:92,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:93,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:94,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:95,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:96,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:97,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:98,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:99,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:100,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:101,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:102,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($VJ,[2,81]),o($VJ,[2,82]),{14:103,36:$V8,38:$V9,41:23,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{21:104,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{25:[1,105]},{2:$V0,4:106,6:3,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:[1,107],24:$V1,25:$V2,26:$V3,28:$V4,29:$V5,31:$V6,33:$V7,36:$V8,38:$V9,41:23,44:$Va,51:$Vb,52:$Vc,53:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:108,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:109,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($VK,[2,38],{43:110,21:111,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp}),{7:[2,47],49:[1,112]},o($VL,[2,51],{50:[1,113]}),{46:[1,114]},{33:[1,115]},{33:[1,116]},{36:[1,117]},{33:[1,118]},{7:[2,46],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},o($VJ,$VH),o($VM,[2,62],{79:$VE,80:$VF}),o($VM,[2,79],{79:$VE,80:$VF}),{27:[1,119],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},o($VN,[2,58],{61:$Vt,62:$Vu,79:$VE,80:$VF}),o($VN,[2,59],{61:$Vt,62:$Vu,79:$VE,80:$VF}),o($VM,[2,60],{79:$VE,80:$VF}),o($VM,[2,61],{79:$VE,80:$VF}),o($VO,[2,70],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,79:$VE,80:$VF}),o($VO,[2,71],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,79:$VE,80:$VF}),o($VO,[2,72],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,79:$VE,80:$VF}),o($VO,[2,73],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,79:$VE,80:$VF}),o($VP,[2,74],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,79:$VE,80:$VF}),o($VP,[2,75],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,79:$VE,80:$VF}),o([7,27,49,75,76],[2,76],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,77:$VD,79:$VE,80:$VF}),o([7,27,49,76],[2,77],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,77:$VD,79:$VE,80:$VF}),o([7,27,49,75,76,77],[2,78],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,79:$VE,80:$VF}),{7:[1,120]},{27:[1,121],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},{26:[1,122]},{2:$V0,6:45,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:[1,123],24:$V1,25:$V2,26:$V3,28:$V4,29:$V5,31:$V6,33:$V7,36:$V8,38:$V9,41:23,44:$Va,51:$Vb,52:$Vc,53:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($VQ,[2,21]),{27:[1,124],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},{7:[2,42],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},{27:[1,125],49:[1,126]},o($VK,[2,37],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF}),{33:[1,127]},{21:128,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{45:[1,129]},{26:[1,130]},{8:$VG,22:131},{37:[1,132]},{8:$VG,22:133},o($VJ,[2,80]),{21:134,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{8:$VG,22:135},{21:136,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($VQ,[2,20]),{8:$VG,22:137},{7:[2,33]},{21:138,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($VL,[2,49],{50:[1,139]}),o($VL,[2,50],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF}),{47:[1,140],48:[1,141]},o($VK,[2,41],{42:142,41:143,36:$V8,38:$V9,55:$Ve,56:$Vf,57:$Vg,58:$Vh}),o($Vq,[2,29]),{26:[1,144]},o($Vq,[2,28]),{7:[1,145],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},o($Vq,[2,23]),{27:[1,146],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},o($Vq,[2,25],{30:[1,147]}),o($VK,[2,36],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF}),{21:148,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{26:[1,149]},{26:[1,150]},{27:[1,151],49:[1,152]},{33:[1,153]},{38:[1,154]},{21:155,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{7:[2,22]},{8:$VG,12:157,22:156,29:$V5},o($VL,[2,48],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF}),{21:158,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},{21:159,26:$V3,33:$VI,60:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,78:$Vp},o($Vq,[2,31],{22:160,8:$VG}),{36:$V8,38:$V9,41:161,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($VK,[2,40]),{39:[1,162]},{27:[1,163],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},o($Vq,[2,26]),o($Vq,[2,27]),{27:[1,164],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},{27:[1,165],59:$Vr,60:$Vs,61:$Vt,62:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,79:$VE,80:$VF},o($Vq,[2,32]),{33:[1,166]},{40:[1,167]},{8:$VG,22:168},{7:[2,34]},{7:[2,35]},o($VK,[2,39]),{33:[1,169]},o($Vq,[2,24]),{27:[1,170]},{8:$VG,22:171},o($Vq,[2,30])],
defaultActions: {26:[2,43],27:[2,44],38:[2,52],39:[2,53],40:[2,54],41:[2,55],42:[2,56],43:[2,57],44:[2,1],125:[2,33],146:[2,22],164:[2,34],165:[2,35]},
parseError: function parseError (str, hash) {
    this.hash = hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
},



};

    const ErroresINT = require('../Analizador/Errores.js');
    const Tokens = require('../Analizador/Tokens.js');
    const AST = require('../Analizador/Dot');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple lÃ­nea
break;
case 2:// comentario multiple lÃ­neas
break;
case 3: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 31;
break;
case 4: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 34;
break;
case 5: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 32;
break;
case 6: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 28;
break;
case 7: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 25;
break;
case 8: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 24;
break;
case 9: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 29;
break;
case 10: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 30;
break;
case 11: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 51;
break;
case 12: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 52;
break;
case 13: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 53;
break;
case 14: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 55;
break;
case 15: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 36;
break;
case 16: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 56;
break;
case 17: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 65;
break;
case 18: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 66;
break;
case 19: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 57;
break;
case 20: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 38;
break;
case 21: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 58;
break;
case 22: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 44;
break;
case 23: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 46;
break;
case 24: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 48;
break;
case 25: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 47;
break;
case 26: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 35;
break;
case 27: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'PALABRA RESERVADA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 37;
break;
case 28: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 71;
break;
case 29: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 72;
break;
case 30: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 73;
break;
case 31: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 74
break;
case 32: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 76;
break;
case 33: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 75;
break;
case 34: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 78;
break;
case 35: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 77;
break;
case 36: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 70;
break;
case 37: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO LOGICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 69;
break;
case 38: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO ARITMETICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 79;
break;
case 39: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO ARITMETICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 80;
break;
case 40: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO ARITMETICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 59;
break;
case 41: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO ARITMETICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 60;
break;
case 42: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO ARITMETICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 61;
break;
case 43: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO ARITMETICO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 62;
break;
case 44: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 45;
break;
case 45: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 7;
break;
case 46: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 49;
break;
case 47: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 50;
break;
case 48: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 26;
break;
case 49: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 27;
break;
case 50: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 8;
break;
case 51: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 23;
break;
case 52: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 39;
break;
case 53: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'SIGNO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 40;
break;
case 54: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'CADENA', yy_.yylloc.first_line, yy_.yylloc.first_column);return 63;
break;
case 55: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'CARACTER', yy_.yylloc.first_line, yy_.yylloc.first_column);return 64;
break;
case 56: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'DECIMAL', yy_.yylloc.first_line, yy_.yylloc.first_column);return 68;
break;
case 57: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'ENTERO', yy_.yylloc.first_line, yy_.yylloc.first_column);return 67;
break;
case 58: var agregarToken = Tokens.AgregarToken;agregarToken(yy_.yytext, 'IDENTIFICADOR', yy_.yylloc.first_line, yy_.yylloc.first_column);return 33;
break;
case 59:return 5;
break;
case 60:
                        console.log('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        var agregarError = ErroresINT.AgregarError;
                        agregarError(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column, 1);
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:int\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:system\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = java;
exports.Parser = java.Parser;
exports.Save = ReturnSave;
exports.parse = function () { return java.parse.apply(java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

